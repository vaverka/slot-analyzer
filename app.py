# ==============================================================================
#  app.py - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–õ–û–¢–û–í V8.1
#  –ò–∑–º–µ–Ω–µ–Ω–∏—è:
#   ‚Ä¢ bet_step: –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –≤ JSON, —Ä–∞–≤–µ–Ω min_bet (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Dragon Hatch)
#   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —à–∞–Ω—Å–∞ —Ü–µ–ª–∏: –±—Ä–æ—É–Ω–æ–≤—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–µ, —á–µ–º RTP-—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
#   ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å —É—á—ë—Ç–æ–º Wild: pure + (1 - pure) * wild_prob * wild_power + –∫–ª–∞–º–ø—ã
#   ‚Ä¢ ¬´–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ¬ª ‚Üí ¬´–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–ø–∏–Ω–æ–≤¬ª
# ==============================================================================

import json
import math
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import os
from decimal import Decimal, ROUND_FLOOR, getcontext

getcontext().prec = 28

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIGS_FOLDER = "."  # –ü–∞–ø–∫–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏

@st.cache_data
def get_local_config_files(folder_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ JSON —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏."""
    try:
        if os.path.exists(folder_path) and os.path.isdir(folder_path):
            files = [f for f in os.listdir(folder_path) if f.endswith('.json')]
            return sorted(files)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {folder_path}: {e}")
        return []

sns.set_theme(style="whitegrid", palette="viridis")

class SlotProbabilityCalculator:
    def __init__(self, config):
        self.config = config
        self.win_probabilities = None

        gc = self.config.get('game_config', {}) or {}
        bet_range = gc.get('bet_range', [0.10, 100.00]) or [0.10, 100.00]
        if not isinstance(bet_range, list) or len(bet_range) < 2:
            bet_range = [0.10, 100.00]

        self.min_bet = float(bet_range[0])
        self.max_bet = float(bet_range[1])

        # –®–∞–≥ —Å—Ç–∞–≤–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —è–≤–Ω—ã–µ –ø–æ–ª—è, –∏–Ω–∞—á–µ = min_bet (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–æ–π)
        self.bet_step = float(
            gc.get('bet_step') or
            gc.get('bet_increment') or
            gc.get('stake_step') or
            self.min_bet
        )

        self.max_win_at_min_bet, self.avg_win = None, None
        self.min_bankroll_formula, self.min_bankroll_calculation = "", ""
        self.volatility = gc.get('volatility', 'medium')
        self.calculate_all()

    # --- –ø–æ–º–æ—â–Ω–∏–∫: –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –∫ —à–∞–≥—É ---
    def _floor_to_step(self, value, step):
        v = Decimal(str(value))
        s = Decimal(str(step))
        if s <= 0:
            return float(v)
        steps = (v / s).to_integral_value(rounding=ROUND_FLOOR)
        return float(steps * s)

    def _clamp_prob(self, p):
        return max(0.0, min(0.999999, float(p)))

    def calculate_all(self):
        self.calculate_min_bankroll()
        self.calculate_win_probabilities()

    def calculate_win_probabilities(self):
        symbols = {s['id']: s for s in self.config.get('symbols', [])}
        if not symbols:
            self.win_probabilities = {}
            return

        probabilities = self.config.get('probabilities', {})
        wild_power = float(probabilities.get('wild_substitution_power', 0.8))
        wild_symbol = next((s for s in symbols.values() if s.get('type') == 'wild'), None)
        wild_prob = float(wild_symbol.get('base_frequency', 0)) if wild_symbol else 0.0

        win_probs = {}
        for symbol_id, data in symbols.items():
            pure_prob = float(data.get('base_frequency', 0.0))
            if data.get('type') == 'wild':
                combo_prob = pure_prob
            else:
                # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –≤–∫–ª–∞–¥ –≤–∞–π–ª–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ —Å–ª—É—á–∏–ª—Å—è
                combo_prob = pure_prob + (1.0 - pure_prob) * wild_prob * wild_power

            pure_prob = self._clamp_prob(pure_prob)
            combo_prob = self._clamp_prob(combo_prob)

            if combo_prob <= 0:
                spins_for_99 = float('inf')
            else:
                spins_for_99 = math.log(0.01) / math.log(1 - combo_prob)

            win_probs[symbol_id] = {
                'name': data.get('name', symbol_id),
                'pure_probability': pure_prob,
                'combo_probability': combo_prob,
                'spins_for_99_prob': spins_for_99
            }
        self.win_probabilities = {'base': win_probs}

    def calculate_min_bankroll(self):
        bet_range = self.config.get('game_config', {}).get('bet_range', [0.10, 100.00])
        if not isinstance(bet_range, list) or len(bet_range) < 2:
            bet_range = [0.10, 100.00]
        self.min_bet, self.max_bet = float(bet_range[0]), float(bet_range[1])

        max_win_multiplier = float(self.config.get('probabilities', {}).get('max_win_multiplier', 2000))
        self.max_win_at_min_bet = max_win_multiplier * self.min_bet
        self.avg_win = 0.4 * self.max_win_at_min_bet

        if self.volatility == 'high':
            part1, part2 = 100 * self.min_bet, 0.05 * self.avg_win
            self.min_bankroll_formula = "max(100 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 5% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation = f"max(${part1:.2f}, ${part2:.2f})"
            min_bankroll = max(part1, part2)
        elif self.volatility == 'medium':
            part1, part2 = 75 * self.min_bet, 0.03 * self.avg_win
            self.min_bankroll_formula = "max(75 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 3% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation = f"max(${part1:.2f}, ${part2:.2f})"
            min_bankroll = max(part1, part2)
        else:
            part1, part2 = 50 * self.min_bet, 0.01 * self.avg_win
            self.min_bankroll_formula = "max(50 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 1% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation = f"max(${part1:.2f}, ${part2:.2f})"
            min_bankroll = max(part1, part2)

        return round(min_bankroll, 2)

    def generate_bankroll_strategy(self, personal_bankroll, risk_level='medium'):
        min_bankroll = self.calculate_min_bankroll()
        min_bank_advice = []
        if personal_bankroll < min_bankroll:
            pb_formatted = f"{personal_bankroll:,.2f}"
            mb_formatted = f"{min_bankroll:,.2f}"
            min_bank_advice.append(
                f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö**: –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (${pb_formatted}) **–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ù–ò–ñ–ï** –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (${mb_formatted})!"
            )
            min_bank_advice.append(
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –≤—Å–µ–≥–æ –±–∞–Ω–∫–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ **–ø—Ä–µ–≤—ã—à–∞–µ—Ç 95%**. –ú—ã **–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú** –∏–≥—Ä–∞—Ç—å —Å —Ç–∞–∫–∏–º –±–∞–Ω–∫–æ–º."
            )
        else:
            pb_formatted = f"{personal_bankroll:,.2f}"
            mb_formatted = f"{min_bankroll:,.2f}"
            min_bank_advice.append(f"‚úÖ –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (${pb_formatted}) –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç (–º–∏–Ω–∏–º—É–º: ${mb_formatted}).")

        risk_multiplier_map = {'low': 1, 'medium': 2, 'high': 5}
        risk_multiplier = risk_multiplier_map.get(risk_level, 2)

        bankroll_power_base = 50
        bankroll_multiplier = (
            max(1, 1 + math.log10(personal_bankroll / bankroll_power_base))
            if personal_bankroll > bankroll_power_base else 1
        )

        theoretical_bet = self.min_bet * risk_multiplier * bankroll_multiplier

        bet_step = self.bet_step
        snapped_bet = self._floor_to_step(theoretical_bet, bet_step)

        safe_max_bet_raw = min(self.max_bet, personal_bankroll / 20)
        safe_max_bet = self._floor_to_step(safe_max_bet_raw, bet_step)

        bet_per_spin = max(self.min_bet, min(snapped_bet, safe_max_bet))
        bet_per_spin = self._floor_to_step(bet_per_spin, bet_step)

        tb_formatted = f"{theoretical_bet:.2f}"
        bps_formatted = f"{bet_per_spin:.2f}"
        mbet_formatted = f"{self.min_bet:.2f}"

        adjustment_note = ""
        if abs(bet_per_spin - theoretical_bet) > 0.01:
            if bet_per_spin == self.min_bet:
                adjustment_note = (
                    f" (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ${tb_formatted} –±—ã–ª–∞ **—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞** –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ)."
                )
            elif bet_per_spin < theoretical_bet:
                adjustment_note = (
                    f" (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ ${tb_formatted} –±—ã–ª–∞ **—É–º–µ–Ω—å—à–µ–Ω–∞ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∞** "
                    f"–¥–æ —à–∞–≥–∞ ${bet_step:.2f} –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–∏–º–∏—Ç–∞–º —Å–ª–æ—Ç–∞)."
                )

        base_win_prob = float(self.config.get('probabilities', {}).get('base_win_probability', 0.25))
        rtp = float(self.config.get('game_config', {}).get('rtp', 0.96))

        bwp_pct = base_win_prob * 100
        losing_spins_count = 10 - int(base_win_prob * 10)
        rtp_pct = rtp * 100
        house_edge_val = 1000 * (1 - rtp)
        hev_formatted = f"{house_edge_val:.2f}"

        truth1 = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞ —Å–ø–∏–Ω: **{bwp_pct:.1f}%**. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º **~{losing_spins_count} –∏–∑ 10 —Å–ø–∏–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–º–∏**."
        truth2 = f"**RTP {rtp_pct:.1f}%** –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π $1,000, –∫–∞–∑–∏–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–±–µ **${hev_formatted}**."
        harsh_truths = [truth1, truth2]

        stop_loss_profile = {'low': 0.25, 'medium': 0.4, 'high': 0.5}
        win_goal_profile = {'low': 0.4, 'medium': 0.6, 'high': 1.0}

        sll_val = personal_bankroll * (1 - stop_loss_profile[risk_level])
        sll_loss = personal_bankroll * stop_loss_profile[risk_level]
        wgl_val = personal_bankroll * (1 + win_goal_profile[risk_level])
        wgl_profit = personal_bankroll * win_goal_profile[risk_level]

        sll_val_f = f"{sll_val:.2f}"
        sll_loss_f = f"{sll_loss:.2f}"
        wgl_val_f = f"{wgl_val:.2f}"
        wgl_profit_f = f"{wgl_profit:.2f}"

        strategy1 = (
            f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞**: –î–ª—è –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –∏ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **${bps_formatted}** "
            f"(—à–∞–≥ —Å—Ç–∞–≤–∫–∏: ${bet_step:.2f}).{adjustment_note}"
        )
        strategy2 = f"**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏**: –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ **${mbet_formatted}**. –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å —Å—Ç–∞–≤–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é."
        strategy3 = f"**–°—Ç–æ–ø-–ª–æ—Å—Å (–∂–µ–ª–µ–∑–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)**: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ **${sll_val_f}** (–ø–æ—Ç–µ—Ä—è ${sll_loss_f})."
        strategy4 = f"**–¶–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞**: –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç **${wgl_val_f}** (–ø—Ä–∏–±—ã–ª—å ${wgl_profit_f})."
        strategy5 = "**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è**: **–ù–ò–ö–û–ì–î–ê** –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å '–æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è'. –ö–∞–∂–¥—ã–π —Å–ø–∏–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º."

        optimal_strategy = [strategy1, strategy2, strategy3, strategy4, strategy5]

        return {
            'min_bank_advice': min_bank_advice,
            'harsh_truths': harsh_truths,
            'optimal_strategy': optimal_strategy,
            'bet_per_spin': bet_per_spin
        }

    def estimate_goal_chance(self, personal_bankroll, desired_win, bet_per_spin=None):
        """
        –û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ –¥–æ —Ä–∞–∑–æ—Ä–µ–Ω–∏—è.
        –ë—Ä–æ—É–Ω–æ–≤—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å –¥—Ä–µ–π—Ñ–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é:
        Œº = bet * (RTP - 1);  œÉ ‚âà k(volatility) * bet
        """
        if desired_win <= 0:
            return {"probability": 1.0}
        if personal_bankroll <= 0:
            return {"probability": 0.0}

        rtp = float(self.config.get('game_config', {}).get('rtp', 0.96))

        if bet_per_spin is None:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É)
            bet_per_spin = max(self.min_bet, min(personal_bankroll / 20, self.max_bet))
            bet_per_spin = self._floor_to_step(bet_per_spin, self.bet_step)

        mu = bet_per_spin * (rtp - 1.0)
        vol_map = {"low": 0.6, "medium": 1.0, "high": 1.8}
        sigma = vol_map.get(self.volatility, 1.0) * bet_per_spin
        sigma2 = max(1e-12, sigma * sigma)

        B = float(personal_bankroll)
        W = float(desired_win)

        if abs(mu) < 1e-12:
            prob = B / (B + W)
        else:
            num = 1.0 - math.exp(-2.0 * mu * B / sigma2)
            den = 1.0 - math.exp(-2.0 * mu * (B + W) / sigma2)
            prob = 0.0 if abs(den) < 1e-18 else num / den

        prob = max(0.0, min(1.0, prob))
        return {"probability": prob}

    def visualize_win_probabilities(self, level='base'):
        if not self.win_probabilities:
            return None
        level_data = self.win_probabilities.get(level)
        if not level_data:
            return None
        df = pd.DataFrame.from_dict(level_data, orient='index').sort_values('combo_probability', ascending=False)
        if df.empty:
            return None
        df['combo_probability_pct'] = df['combo_probability'] * 100
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.barplot(
            x='combo_probability_pct', y='name', data=df,
            palette='viridis_r', orient='h', hue='name', legend=False, ax=ax
        )
        ax.set_title(f'–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ö–∏—Ç–∞ —Å —Å–∏–º–≤–æ–ª–æ–º (–£—Ä–æ–≤–µ–Ω—å: {level})', fontsize=16, pad=20)
        ax.set_xlabel('–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∑–∞ —Å–ø–∏–Ω (—Å —É—á—ë—Ç–æ–º Wild), %', fontsize=12)
        ax.set_ylabel('–°–∏–º–≤–æ–ª', fontsize=12)
        for p in ax.patches:
            width = p.get_width()
            ax.text(width + 0.05, p.get_y() + p.get_height() / 2., f'{width:.3f}%', va='center', fontsize=10)
        ax.spines['top'].set_visible(False); ax.spines['right'].set_visible(False)
        fig.tight_layout()
        return fig

    def get_results_table(self, level='base'):
        if not self.win_probabilities:
            return pd.DataFrame()
        level_data = self.win_probabilities.get(level)
        if not level_data:
            return pd.DataFrame()
        df = pd.DataFrame.from_dict(level_data, orient='index')
        if df.empty:
            return df
        df_sorted = df.sort_values(by='combo_probability', ascending=False)
        df_display = pd.DataFrame({
            '–°–∏–º–≤–æ–ª': df_sorted['name'],
            '–ß–∏—Å—Ç–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': df_sorted['pure_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ö–∏—Ç–∞ (—Å Wild, %)': df_sorted['combo_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–°–ø–∏–Ω–æ–≤ –¥–æ 99% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ö–∏—Ç–∞': df_sorted['spins_for_99_prob'].apply(lambda x: f"{int(x)}" if x != float('inf') else "‚àû")
        })
        return df_display

# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ Streamlit ---
def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤", layout="wide", initial_sidebar_state="expanded")

    local_config_files = get_local_config_files(CONFIGS_FOLDER)

    with st.sidebar:
        st.title("üé∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–Ω–∞–ª–∏–∑–∞")

        file_source = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            ('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞', '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö'),
            index=0
        )

        config_file = None

        if file_source == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞':
            config_file = st.file_uploader("1a. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞", type="json")
        elif file_source == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö' and local_config_files:
            selected_filename = st.selectbox(
                "1b. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞",
                options=local_config_files,
                format_func=lambda x: x
            )
            if selected_filename:
                try:
                    full_path = os.path.join(CONFIGS_FOLDER, selected_filename)
                    with open(full_path, 'rb') as f:
                        raw_bytes = f.read()
                    from io import BytesIO
                    config_file = BytesIO(raw_bytes)
                    config_file.name = selected_filename
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {selected_filename}: {e}")
                    config_file = None
        elif file_source == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö' and not local_config_files:
            st.info(f"–ü–∞–ø–∫–∞ '{CONFIGS_FOLDER}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")

        personal_bankroll, desired_win, risk_level, analyze_button = 0, 0, 'medium', False
        if config_file is not None:
            personal_bankroll = st.number_input("2. –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª ($)", min_value=0.01, value=200.0, step=10.0, format="%.2f")
            desired_win = st.number_input("3. –í–∞—à –∂–µ–ª–∞–µ–º—ã–π —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à ($)", min_value=1.0, value=500.0, step=10.0, format="%.2f")
            risk_level = st.selectbox("4. –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", options=['low', 'medium', 'high'], index=1).lower()
            analyze_button = st.button("üöÄ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)

    st.title("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–ª–æ—Ç–æ–≤")
    st.markdown("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å—ã –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ–¥ –≤–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª. –ß–∞—Å—Ç—å –º–µ—Ç—Ä–∏–∫ ‚Äî —ç–≤—Ä–∏—Å—Ç–∏–∫–∏; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –∞ –Ω–µ –∏—Å—Ç–∏–Ω—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏.")

    if analyze_button and config_file is not None:
        try:
            if hasattr(config_file, 'seek'):
                config_file.seek(0)
            config = json.load(config_file)

            calculator = SlotProbabilityCalculator(config)

            if personal_bankroll < calculator.min_bet:
                pb_formatted_error = f"{personal_bankroll:.2f}"
                mb_formatted_error = f"{calculator.min_bet:.2f}"
                st.error(f"**–í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (${pb_formatted_error}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ (${mb_formatted_error}).**")
                st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–µ–ª–∏—á—å—Ç–µ –±–∞–Ω–∫—Ä–æ–ª–ª.")
                st.stop()

            game_config = config.get('game_config', {})
            gn_formatted = game_config.get('game_name', 'N/A')
            pb_formatted = f"{personal_bankroll:,.2f}"
            dw_formatted = f"{desired_win:,.2f}"
            rl_formatted = risk_level.capitalize()

            st.header(f"üé∞ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–∞: {gn_formatted}", divider="rainbow")
            st.markdown(f"### –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ë–∞–Ω–∫—Ä–æ–ª–ª: ${pb_formatted} | –¶–µ–ª—å: +${dw_formatted} | –†–∏—Å–∫: **{rl_formatted}**")

            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Å—Ç–∞–≤–∫–∞
            strategy = calculator.generate_bankroll_strategy(personal_bankroll, risk_level)
            bet_per_spin = strategy.get('bet_per_spin')

            # –û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
            goal_result = calculator.estimate_goal_chance(personal_bankroll, desired_win, bet_per_spin)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–ø–∏–Ω–æ–≤ (–±–µ–∑ –µ–¥–∏–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)
            min_payable_spins = int(personal_bankroll / bet_per_spin) if bet_per_spin > 0 else float('inf')

            st.subheader("üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –∏ —Ä–µ—Å—É—Ä—Å —Å–ø–∏–Ω–æ–≤", divider="blue")
            col1, col2 = st.columns(2)
            with col1:
                dw_label_formatted = f"{desired_win:,.2f}"
                st.metric(
                    label=f"–û—Ü–µ–Ω–æ—á–Ω—ã–π —à–∞–Ω—Å (–º–æ–¥–µ–ª—å —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é) –Ω–∞ +${dw_label_formatted}",
                    value=f"{goal_result['probability']*100:.2f}%"
                )
            with col2:
                spins_str = f"{min_payable_spins}" if min_payable_spins != float('inf') else "‚àû"
                st.metric(label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–ø–∏–Ω–æ–≤ (–ø—Ä–∏ —Ä–µ–∫. —Å—Ç–∞–≤–∫–µ)", value=spins_str)

            with st.expander("–ö–∞–∫ —ç—Ç–æ –ø–æ–Ω–∏–º–∞—Ç—å? ü§î"):
                st.markdown(f"""
                - **–û—Ü–µ–Ω–æ—á–Ω—ã–π —à–∞–Ω—Å** —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º RTP –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–Ω–µ —Ç–æ—á–Ω–∞—è –º–∞—Ç–º–æ–¥–µ–ª—å —Å–ª–æ—Ç–∞, –∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ).
                - **–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–ø–∏–Ω–æ–≤** ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–ø–∏–Ω–æ–≤ –≤—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞.
                - **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞**: ${bet_per_spin:.2f} (—à–∞–≥ —Å—Ç–∞–≤–∫–∏: ${calculator.bet_step:.2f}; –º–∏–Ω. —Å—Ç–∞–≤–∫–∞: ${calculator.min_bet:.2f}).
                """)

            st.subheader("üìä –û—Ü–µ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–∏–º–≤–æ–ª–æ–≤", divider="blue")
            fig = calculator.visualize_win_probabilities()
            if fig:
                st.pyplot(fig)
            st.dataframe(calculator.get_results_table(), use_container_width=True)
            st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä-—Å–ª–æ—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ –Ω–æ—Å—è—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä; —Ç–æ—á–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è/–∫–∞—Å–∫–∞–¥–æ–≤.")

            st.header("‚ôüÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–≥—Ä—ã", divider="rainbow")
            with st.container(border=True):
                st.subheader("1) –í–µ—Ä–¥–∏–∫—Ç –æ –±–∞–Ω–∫—Ä–æ–ª–ª–µ")
                for advice in strategy['min_bank_advice']:
                    st.markdown(f"‚û°Ô∏è {advice}")

            with st.container(border=True):
                st.subheader("2) –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ –±–∞–Ω–∫–∞")
                st.markdown("–í–∞—à –±–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –ª—É–∑-—Å—Ç—Ä–µ–π–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.")
                st.markdown("\n**–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:**")
                st.markdown(f" ‚Ä¢ **–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞**: ${calculator.min_bet:.2f}")
                st.markdown(f" ‚Ä¢ **–®–∞–≥ —Å—Ç–∞–≤–∫–∏**: ${calculator.bet_step:.2f}")
                st.markdown(f" ‚Ä¢ **–ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –º–∏–Ω. —Å—Ç–∞–≤–∫–µ**: ${calculator.max_win_at_min_bet:,.2f}")
                st.markdown(f" ‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π –∑–Ω–∞—á–∏–º—ã–π –≤—ã–∏–≥—Ä—ã—à (–º–∏–Ω. —Å—Ç–∞–≤–∫–∞)**: ${calculator.avg_win:,.2f}")
                st.markdown(f" ‚Ä¢ **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: {calculator.volatility.capitalize()}")
                st.markdown("\n**–§–æ—Ä–º—É–ª–∞ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞:**")
                st.markdown(f"`{calculator.min_bankroll_formula}` ‚Üí `{calculator.min_bankroll_calculation}`")
                min_bankroll_value = calculator.calculate_min_bankroll()
                st.success(f"**–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º**: **${min_bankroll_value:,.2f}**")

            with st.container(border=True):
                st.subheader("3) –ñ—ë—Å—Ç–∫–∏–µ —Ñ–∞–∫—Ç—ã –æ —à–∞–Ω—Å–∞—Ö")
                for truth in strategy['harsh_truths']:
                    st.markdown(f"‚û°Ô∏è {truth}")

            with st.container(border=True):
                st.subheader("4) –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
                for i, step in enumerate(strategy['optimal_strategy'], 1):
                    st.markdown(f"**–®–∞–≥ {i}.** {step}")

        except json.JSONDecodeError:
            st.error("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON. –û—à–∏–±–∫–∞: {e}")
    elif analyze_button and config_file is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")

if __name__ == "__main__":
    main()

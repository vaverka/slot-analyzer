# ==============================================================================
#  app.py - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–õ–û–¢–û–í V4.8 (—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º)
# ==============================================================================
import json
import math
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# --- –ö–ª–∞—Å—Å-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π ---
sns.set_theme(style="whitegrid", palette="viridis")

class SlotProbabilityCalculator:
    def __init__(self, config):
        self.config = config
        self.win_probabilities = None
        self.min_bet, self.max_bet, self.max_win, self.avg_win = None, None, None, None
        self.min_bankroll_formula, self.min_bankroll_calculation = "", ""
        self.volatility = self.config.get('game_config', {}).get('volatility', 'medium')
        # –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        self.calculate_all()

    def calculate_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        self.calculate_min_bankroll()
        self.calculate_win_probabilities()

    def calculate_win_probabilities(self):
        symbols = {s['id']: s for s in self.config.get('symbols', [])}
        if not symbols: self.win_probabilities = {}; return
        probabilities = self.config.get('probabilities', {})
        wild_power = float(probabilities.get('wild_substitution_power', 0.8))
        wild_symbol = next((s for s in symbols.values() if s.get('type') == 'wild'), None)
        wild_prob = float(wild_symbol.get('base_frequency', 0)) if wild_symbol else 0
        win_probs = {}
        for symbol_id, data in symbols.items():
            pure_prob = float(data.get('base_frequency', 0))
            combo_prob = pure_prob + (wild_prob * wild_power if data.get('type') != 'wild' else 0)
            spins_for_99 = math.log(0.01) / math.log(1 - combo_prob) if 0 < combo_prob < 1 else float('inf')
            win_probs[symbol_id] = {'name': data['name'], 'pure_probability': pure_prob, 'combo_probability': combo_prob, 'spins_for_99_prob': spins_for_99}
        self.win_probabilities = {'base': win_probs}

    def calculate_min_bankroll(self):
        bet_range = self.config.get('game_config', {}).get('bet_range', [0.10, 100.00])
        if not isinstance(bet_range, list) or len(bet_range) < 2: bet_range = [0.10, 100.00]
        self.min_bet, self.max_bet = float(bet_range[0]), float(bet_range[1])
        max_win_multiplier = float(self.config.get('probabilities', {}).get('max_win_multiplier', 2000))
        self.max_win, self.avg_win = max_win_multiplier * self.max_bet, 0.4 * (max_win_multiplier * self.max_bet)
        min_bankroll = 0
        if self.volatility == 'high':
            part1, part2 = 100 * self.min_bet, 0.05 * self.avg_win
            self.min_bankroll_formula, self.min_bankroll_calculation, min_bankroll = "max(100 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 5% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)", f"max(${part1:.2f}, ${part2:.2f})", max(part1, part2)
        elif self.volatility == 'medium':
            part1, part2 = 75 * self.min_bet, 0.03 * self.avg_win
            self.min_bankroll_formula, self.min_bankroll_calculation, min_bankroll = "max(75 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 3% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)", f"max(${part1:.2f}, ${part2:.2f})", max(part1, part2)
        else:
            part1, part2 = 50 * self.min_bet, 0.01 * self.avg_win
            self.min_bankroll_formula, self.min_bankroll_calculation, min_bankroll = "max(50 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 1% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)", f"max(${part1:.2f}, ${part2:.2f})", max(part1, part2)
        return round(min_bankroll, 2)

    def generate_bankroll_strategy(self, personal_bankroll, risk_level='medium'):
        min_bankroll = self.calculate_min_bankroll()
        min_bank_advice = []
        if personal_bankroll < min_bankroll:
            min_bank_advice.append(f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö**: –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (${personal_bankroll:,.2f}) **–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ù–ò–ñ–ï** –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (${min_bankroll:,.2f})!")
            min_bank_advice.append("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –≤—Å–µ–≥–æ –±–∞–Ω–∫–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ **–ø—Ä–µ–≤—ã—à–∞–µ—Ç 95%**. –ú—ã **–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú** –∏–≥—Ä–∞—Ç—å —Å —Ç–∞–∫–∏–º –±–∞–Ω–∫–æ–º.")
        else:
            min_bank_advice.append(f"‚úÖ –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (${personal_bankroll:,.2f}) –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç (–º–∏–Ω–∏–º—É–º: ${min_bankroll:,.2f}).")
        risk_profiles = {'low': {'bet_percent': 0.5, 'stop_loss': 0.25, 'win_goal': 0.4},'medium': {'bet_percent': 1.0, 'stop_loss': 0.4, 'win_goal': 0.6},'high': {'bet_percent': 2.0, 'stop_loss': 0.5, 'win_goal': 1.0}}
        profile = risk_profiles.get(risk_level, risk_profiles['medium'])
        theoretical_bet = personal_bankroll * profile['bet_percent'] / 100
        bet_per_spin = min(theoretical_bet, self.max_bet)
        base_win_prob, rtp = float(self.config.get('probabilities', {}).get('base_win_probability', 0.25)), self.config.get('game_config', {}).get('rtp', 0.96)
        harsh_truths = [f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞ —Å–ø–∏–Ω: **{base_win_prob*100:.1f}%**. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º **~{10 - int(base_win_prob * 10)} –∏–∑ 10 —Å–ø–∏–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–º–∏**.", f"**RTP {rtp*100:.1f}%** –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π $1,000, –∫–∞–∑–∏–Ω–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–±–µ **${1000 * (1 - rtp):.2f}**."]
        optimal_strategy = [f"**–°—Ç–∞–≤–∫–∞**: –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞ **${bet_per_spin:.2f}**. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ **${self.min_bet:.2f}**.", f"**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏**: –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –¥–æ **${bet_per_spin:.2f}** –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞.", f"**–°—Ç–æ–ø-–ª–æ—Å—Å (–∂–µ–ª–µ–∑–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)**: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ **${personal_bankroll * (1-profile['stop_loss']):.2f}** (–ø–æ—Ç–µ—Ä—è ${personal_bankroll * profile['stop_loss']:.2f}).", f"**–¶–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞**: –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç **${personal_bankroll * (1+profile['win_goal']):.2f}** (–ø—Ä–∏–±—ã–ª—å ${personal_bankroll * profile['win_goal']:.2f}).", "**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è**: **–ù–ò–ö–û–ì–î–ê** –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å '–æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è'. –ö–∞–∂–¥—ã–π —Å–ø–∏–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º. –ü–æ—Å–ª–µ –∫—Ä—É–ø–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤."]
        return {'min_bank_advice': min_bank_advice, 'harsh_truths': harsh_truths, 'optimal_strategy': optimal_strategy, 'bet_per_spin': bet_per_spin}

    def estimate_goal_chance(self, personal_bankroll, desired_win):
        rtp = self.config.get('game_config', {}).get('rtp', 0.96)
        if desired_win <= 0: return {"probability": 1.0}
        if personal_bankroll <= 0: return {"probability": 0.0}
        target_amount = personal_bankroll + desired_win
        effective_bankroll = personal_bankroll * rtp
        probability = effective_bankroll / target_amount
        return {"probability": probability}

    def visualize_win_probabilities(self, level='base'):
        if not self.win_probabilities: return None
        level_data = self.win_probabilities.get(level)
        if not level_data: return None
        df = pd.DataFrame.from_dict(level_data, orient='index').sort_values('combo_probability', ascending=False)
        if df.empty: return None
        df['combo_probability_pct'] = df['combo_probability'] * 100
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.barplot(x='combo_probability_pct', y='name', data=df, palette='viridis_r', orient='h', hue='name', legend=False, ax=ax)
        ax.set_title(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å–∏–º–≤–æ–ª–æ–º (–£—Ä–æ–≤–µ–Ω—å: {level})', fontsize=16, pad=20)
        ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω —Å–ø–∏–Ω (—Å —É—á–µ—Ç–æ–º Wild), %', fontsize=12); ax.set_ylabel('–°–∏–º–≤–æ–ª', fontsize=12)
        for p in ax.patches:
            width = p.get_width()
            ax.text(width + 0.05, p.get_y() + p.get_height() / 2., f'{width:.3f}%', va='center', fontsize=10)
        ax.spines['top'].set_visible(False); ax.spines['right'].set_visible(False)
        fig.tight_layout()
        return fig

    def get_results_table(self, level='base'):
        if not self.win_probabilities: return pd.DataFrame()
        level_data = self.win_probabilities.get(level)
        if not level_data: return pd.DataFrame()
        df = pd.DataFrame.from_dict(level_data, orient='index')
        if df.empty: return df
        df_sorted = df.sort_values(by='combo_probability', ascending=False)
        df_display = pd.DataFrame({
            '–°–∏–º–≤–æ–ª': df_sorted['name'],
            '–ß–∏—Å—Ç–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': df_sorted['pure_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—Å Wild, %)': df_sorted['combo_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–°–ø–∏–Ω–æ–≤ –¥–ª—è 99% —à–∞–Ω—Å–∞': df_sorted['spins_for_99_prob'].apply(lambda x: f"{int(x)}" if x != float('inf') else "‚àû")
        })
        return df_display

# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤", layout="wide", initial_sidebar_state="expanded")

    with st.sidebar:
        st.title("üé∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–Ω–∞–ª–∏–∑–∞")
        uploaded_file = st.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞", type="json")
        personal_bankroll, desired_win, risk_level, analyze_button = 0, 0, 'medium', False
        if uploaded_file:
            personal_bankroll = st.number_input("2. –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª ($)", min_value=1.0, value=200.0, step=10.0, format="%.2f")
            desired_win = st.number_input("3. –í–∞—à –∂–µ–ª–∞–µ–º—ã–π —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à ($)", min_value=1.0, value=500.0, step=10.0, format="%.2f")
            risk_level = st.selectbox("4. –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", options=['low', 'medium', 'high'], index=1).lower()
            analyze_button = st.button("üöÄ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)

    st.title("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–ª–æ—Ç–æ–≤")
    st.markdown("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª–æ—Ç–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.")

    if analyze_button and uploaded_file:
        try:
            uploaded_file.seek(0)
            config = json.load(uploaded_file)
            calculator = SlotProbabilityCalculator(config)
            game_config = config.get('game_config', {})
            
            st.header(f"üé∞ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–∞: {game_config.get('game_name', 'N/A')}", divider="rainbow")
            st.subheader(f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ë–∞–Ω–∫—Ä–æ–ª–ª: **${personal_bankroll:,.2f}** | –ñ–µ–ª–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à: **+${desired_win:,.2f}** | –†–∏—Å–∫: **{risk_level.capitalize()}**")

            goal_result = calculator.estimate_goal_chance(personal_bankroll, desired_win)
            rtp = game_config.get('rtp', 0.96)
            strategy = calculator.generate_bankroll_strategy(personal_bankroll, risk_level)
            bet_per_spin = strategy.get('bet_per_spin', calculator.min_bet)
            net_loss_per_spin = bet_per_spin * (1 - rtp) if bet_per_spin > 0 else 0
            expected_spins = int(personal_bankroll / net_loss_per_spin) if net_loss_per_spin > 0 else float('inf')

            st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Ü–µ–ª–∏", divider="blue")
            col1, col2 = st.columns(2)
            with col1:
                st.metric(label=f"–û—Ü–µ–Ω–æ—á–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å ${desired_win:,.2f}", value=f"{goal_result['probability']*100:.4f}%")
            with col2:
                spins_str = f"~{expected_spins}" if expected_spins != float('inf') else "‚àû"
                st.metric(label="–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è (–∫–æ–ª-–≤–æ —Å–ø–∏–Ω–æ–≤)", value=spins_str)
            
            # --- –í–û–ó–í–†–ê–©–ï–ù–ù–´–ô –ë–õ–û–ö –° –†–ê–ó–í–ï–†–ù–£–¢–´–ú –û–ë–™–Ø–°–ù–ï–ù–ò–ï–ú ---
            with st.expander("–ö–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –∏ –ø–æ—á–µ–º—É –º—ã —Å—á–∏—Ç–∞–µ–º —Å–ø–∏–Ω—ã '–¥–æ —Ä–∞–∑–æ—Ä–µ–Ω–∏—è'? ü§î"):
                st.markdown("""
                –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã.

                #### 1. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ
                –í –ª—é–±–æ–π –∏–≥—Ä–µ –∫–∞–∑–∏–Ω–æ —Å RTP (Return to Player) –º–µ–Ω—å—à–µ 100%, –∫–∞–∂–¥—ã–π –≤–∞—à —Å–ø–∏–Ω –≤ —Å—Ä–µ–¥–Ω–µ–º **—É–º–µ–Ω—å—à–∞–µ—Ç** –≤–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª. 
                –í–µ–ª–∏—á–∏–Ω–∞ —ç—Ç–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ `–í–∞—à–∞ –°—Ç–∞–≤–∫–∞ * (1 - RTP)`. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –¥–æ–ª–≥–æ–π –∏–≥—Ä–µ **–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∏–∑–±–µ–∂–Ω—ã–º –∏—Å—Ö–æ–¥–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä—ã—à –≤—Å–µ–≥–æ –±–∞–Ω–∫—Ä–æ–ª–ª–∞**. 
                –ü–æ—ç—Ç–æ–º—É "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ –¥–æ —Ä–∞–∑–æ—Ä–µ–Ω–∏—è" ‚Äî —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ. **–≠—Ç–æ –≤–∞—à "–∑–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏" –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∑–∏–Ω–æ.**

                #### 2. –í—ã–∏–≥—Ä—ã—à ‚Äî —ç—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã (–¥–∏—Å–ø–µ—Ä—Å–∏—è)
                –í–∞—à –∂–µ–ª–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à ‚Äî —ç—Ç–æ –Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ **—Å—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)**. –í—ã –Ω–µ "–¥–≤–∏–∂–µ—Ç–µ—Å—å" –∫ –≤—ã–∏–≥—Ä—ã—à—É —Å –∫–∞–∂–¥—ã–º —Å–ø–∏–Ω–æ–º. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –≤—ã –º–µ–¥–ª–µ–Ω–Ω–æ "–¥—Ä–µ–π—Ñ—É–µ—Ç–µ" –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –Ω–∞–¥–µ—è—Å—å –ø–æ–π–º–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–∫—Ä–æ—é—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏ –∏ –≤—ã–≤–µ–¥—É—Ç –≤–∞—Å –≤ –ø–ª—é—Å.

                #### 3. –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è —Å–ø–∏–Ω–æ–≤ = –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è —à–∞–Ω—Å–æ–≤
                –£—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–≥—Ä–æ–∫–∞ —Å–≤–æ–¥–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É: **–ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å —É–¥–∞—á–µ (–¥–∏—Å–ø–µ—Ä—Å–∏–∏) —à–∞–Ω—Å —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.** 
                –ß–µ–º –±–æ–ª—å—à–µ —Å–ø–∏–Ω–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫—Ä–æ–ª–ª, —Ç–µ–º –±–æ–ª—å—à–µ —É –≤–∞—Å –ø–æ–ø—ã—Ç–æ–∫ "–ø–æ–π–º–∞—Ç—å" —Ç–æ—Ç —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏.

                ---
                
                #### –ê–Ω–∞–ª–æ–≥–∏—è: –ü–ª–æ–≤–µ—Ü –ø—Ä–æ—Ç–∏–≤ —Ç–µ—á–µ–Ω–∏—è
                
                –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –ø–ª—ã–≤–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ —Ç–µ—á–µ–Ω–∏—è (**–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ**). –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –¥–æ–ø–ª—ã—Ç—å –¥–æ —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–∞ (**–∂–µ–ª–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à**), –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –≤–ø–µ—Ä–µ–¥–∏. –í–∞—à–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (**–±–∞–Ω–∫—Ä–æ–ª–ª**) ‚Äî —ç—Ç–æ —Ç–æ, –∫–∞–∫ –¥–æ–ª–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª—ã—Ç—å. 
                
                **"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è"** ‚Äî —ç—Ç–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –Ω–∞ –≤–æ–¥–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ç–µ—á–µ–Ω–∏–µ –≤–∞—Å —É–Ω–µ—Å–µ—Ç (**—Ä–∞–∑–æ—Ä–µ–Ω–∏–µ**). –ß–µ–º –¥–æ–ª—å—à–µ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å, —á—Ç–æ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥.
                """)

            st.subheader("üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", divider="blue")
            fig = calculator.visualize_win_probabilities()
            if fig: st.pyplot(fig)
            st.dataframe(calculator.get_results_table(), use_container_width=True)

            st.header("‚ôüÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–≥—Ä—ã", divider="rainbow")
            
            with st.container(border=True):
                st.subheader("1. –í–µ—Ä–¥–∏–∫—Ç –æ –≤–∞—à–µ–º –±–∞–Ω–∫—Ä–æ–ª–ª–µ")
                for advice in strategy['min_bank_advice']: st.markdown(f"‚û°Ô∏è {advice}")
            
            with st.container(border=True):
                st.subheader("2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –†–∞—Å—á–µ—Ç –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞")
                st.markdown("–ß—Ç–æ–±—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–ª–∞ —Å–º—ã—Å–ª, –≤–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–µ—Ä–µ–∂–∏—Ç—å —Å–µ—Ä–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.")
                
                st.markdown("\n**–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:**")
                st.markdown(f" ‚Ä¢ **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞**: ${calculator.min_bet:.2f}")
                st.markdown(f" ‚Ä¢ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –≤ —Å–ª–æ—Ç–µ**: ${calculator.max_win:,.2f}")
                st.markdown(f" ‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π –∑–Ω–∞—á–∏–º—ã–π –≤—ã–∏–≥—Ä—ã—à**: ${calculator.avg_win:,.2f} (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞)")
                st.markdown(f" ‚Ä¢ **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: {calculator.volatility.capitalize()}")
                
                st.markdown("\n**–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞:**")
                st.markdown(f"1. **–§–æ—Ä–º—É–ª–∞** (–¥–ª—è {calculator.volatility.capitalize()} –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏): `{calculator.min_bankroll_formula}`")
                st.markdown(f"2. **–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è**: `{calculator.min_bankroll_calculation}`")

                min_bankroll_final_str = ''.join(filter(lambda char: char.isdigit() or char in '.,', strategy['min_bank_advice'][0].split('$')[-1]))
                st.success(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **${min_bankroll_final_str}**")

            with st.container(border=True):
                st.subheader("3. –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–∞–≤–¥–∞ –æ —à–∞–Ω—Å–∞—Ö (–±–µ–∑ –ø—Ä–∏–∫—Ä–∞—Å)")
                for truth in strategy['harsh_truths']: st.markdown(f"‚û°Ô∏è {truth}")
            with st.container(border=True):
                st.subheader("4. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
                for i, step in enumerate(strategy['optimal_strategy'], 1): st.markdown(f"**–®–∞–≥ {i}**: {step}")
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JSON-—Ñ–∞–π–ª –∏–º–µ–µ—Ç –≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –û—à–∏–±–∫–∞: {e}")
    elif not uploaded_file and analyze_button:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")

if __name__ == "__main__":
    main()

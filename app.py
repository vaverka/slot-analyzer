# ==============================================================================
#  app.py - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–õ–û–¢–û–í V7.7 (—Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–ø–æ)
# ==============================================================================
import json
import math
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import os # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIGS_FOLDER = "slot_configs" # –ü–∞–ø–∫–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –≤ —Ä–µ–ø–æ ---
@st.cache_data
def get_local_config_files(folder_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ JSON —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏.
    """
    try:
        if os.path.exists(folder_path) and os.path.isdir(folder_path):
            files = [f for f in os.listdir(folder_path) if f.endswith('.json')]
            return sorted(files)
        else:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            return []
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –û–°, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        # st.write –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º print –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {folder_path}: {e}")
        return []

# --- –ö–ª–∞—Å—Å-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π ---
sns.set_theme(style="whitegrid", palette="viridis")

class SlotProbabilityCalculator:
    def __init__(self, config):
        self.config = config
        self.win_probabilities = None
        self.min_bet, self.max_bet, self.max_win_at_min_bet, self.avg_win = None, None, None, None
        self.min_bankroll_formula, self.min_bankroll_calculation = "", ""
        self.volatility = self.config.get('game_config', {}).get('volatility', 'medium')
        self.calculate_all()

    def calculate_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        self.calculate_min_bankroll()
        self.calculate_win_probabilities()

    def calculate_win_probabilities(self):
        symbols = {s['id']: s for s in self.config.get('symbols', [])}
        if not symbols: self.win_probabilities = {}; return
        probabilities = self.config.get('probabilities', {})
        wild_power = float(probabilities.get('wild_substitution_power', 0.8))
        wild_symbol = next((s for s in symbols.values() if s.get('type') == 'wild'), None)
        wild_prob = float(wild_symbol.get('base_frequency', 0)) if wild_symbol else 0
        win_probs = {}
        for symbol_id, data in symbols.items():
            pure_prob = float(data.get('base_frequency', 0))
            combo_prob = pure_prob + (wild_prob * wild_power if data.get('type') != 'wild' else 0)
            spins_for_99 = math.log(0.01) / math.log(1 - combo_prob) if 0 < combo_prob < 1 else float('inf')
            win_probs[symbol_id] = {'name': data['name'], 'pure_probability': pure_prob, 'combo_probability': combo_prob, 'spins_for_99_prob': spins_for_99}
        self.win_probabilities = {'base': win_probs}

    def calculate_min_bankroll(self):
        bet_range = self.config.get('game_config', {}).get('bet_range', [0.10, 100.00])
        if not isinstance(bet_range, list) or len(bet_range) < 2: bet_range = [0.10, 100.00]
        self.min_bet, self.max_bet = float(bet_range[0]), float(bet_range[1])
        max_win_multiplier = float(self.config.get('probabilities', {}).get('max_win_multiplier', 2000))
        self.max_win_at_min_bet = max_win_multiplier * self.min_bet
        self.avg_win = 0.4 * self.max_win_at_min_bet
        min_bankroll = 0
        if self.volatility == 'high':
            part1, part2 = 100 * self.min_bet, 0.05 * self.avg_win
            self.min_bankroll_formula = "max(100 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 5% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation, min_bankroll = f"max(\${part1:.2f}, \${part2:.2f})", max(part1, part2)
        elif self.volatility == 'medium':
            part1, part2 = 75 * self.min_bet, 0.03 * self.avg_win
            self.min_bankroll_formula = "max(75 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 3% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation, min_bankroll = f"max(\${part1:.2f}, \${part2:.2f})", max(part1, part2)
        else: # low
            part1, part2 = 50 * self.min_bet, 0.01 * self.avg_win
            self.min_bankroll_formula = "max(50 * –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞, 1% * –°—Ä–µ–¥–Ω–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞)"
            self.min_bankroll_calculation, min_bankroll = f"max(\${part1:.2f}, \${part2:.2f})", max(part1, part2)
        return round(min_bankroll, 2)

    def generate_bankroll_strategy(self, personal_bankroll, risk_level='medium'):
        min_bankroll = self.calculate_min_bankroll()
        min_bank_advice = []
        if personal_bankroll < min_bankroll:
            pb_formatted = f"{personal_bankroll:,.2f}"
            mb_formatted = f"{min_bankroll:,.2f}"
            min_bank_advice.append(f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö**: –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (\${pb_formatted}) **–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û –ù–ò–ñ–ï** –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (\${mb_formatted})!")
            min_bank_advice.append("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –≤—Å–µ–≥–æ –±–∞–Ω–∫–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ **–ø—Ä–µ–≤—ã—à–∞–µ—Ç 95%**. –ú—ã **–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú** –∏–≥—Ä–∞—Ç—å —Å —Ç–∞–∫–∏–º –±–∞–Ω–∫–æ–º.")
        else:
            pb_formatted = f"{personal_bankroll:,.2f}"
            mb_formatted = f"{min_bankroll:,.2f}"
            min_bank_advice.append(f"‚úÖ –í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (\${pb_formatted}) –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç (–º–∏–Ω–∏–º—É–º: \${mb_formatted}).")
        
        risk_multiplier_map = {'low': 1, 'medium': 2, 'high': 5}
        risk_multiplier = risk_multiplier_map.get(risk_level, 2)
        bankroll_power_base = 50
        bankroll_multiplier = max(1, 1 + math.log10(personal_bankroll / bankroll_power_base)) if personal_bankroll > bankroll_power_base else 1
        theoretical_bet = self.min_bet * risk_multiplier * bankroll_multiplier
        bet_step = self.min_bet
        snapped_bet = math.floor(theoretical_bet / bet_step) * bet_step
        safe_max_bet = min(self.max_bet, personal_bankroll / 20)
        bet_per_spin = max(self.min_bet, min(snapped_bet, safe_max_bet))
        
        tb_formatted = f"{theoretical_bet:.2f}"
        bps_formatted = f"{bet_per_spin:.2f}"
        mbet_formatted = f"{self.min_bet:.2f}"
        
        adjustment_note = ""
        if abs(bet_per_spin - theoretical_bet) > 0.01:
            if bet_per_spin == self.min_bet:
                adjustment_note = f" (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ \${tb_formatted} –±—ã–ª–∞ **—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞** –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ)."
            elif bet_per_spin < theoretical_bet:
                 adjustment_note = f" (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞ \${tb_formatted} –±—ã–ª–∞ **—É–º–µ–Ω—å—à–µ–Ω–∞ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∞** –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∞–≥—É —Å—Ç–∞–≤–∫–∏)."
        
        base_win_prob, rtp = float(self.config.get('probabilities', {}).get('base_win_probability', 0.25)), self.config.get('game_config', {}).get('rtp', 0.96)
        bwp_pct = base_win_prob * 100
        losing_spins_count = 10 - int(base_win_prob * 10)
        rtp_pct = rtp * 100
        house_edge_val = 1000 * (1 - rtp)
        hev_formatted = f"{house_edge_val:.2f}"
        
        truth1 = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞ —Å–ø–∏–Ω: **{bwp_pct:.1f}%**. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Å—Ä–µ–¥–Ω–µ–º **~{losing_spins_count} –∏–∑ 10 —Å–ø–∏–Ω–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–º–∏**."
        truth2 = f"**RTP {rtp_pct:.1f}%** –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π \$1,000, –∫–∞–∑–∏–Ω–æ –≤ —Å—Ä–µ–¥–Ω–æ–º –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–±–µ **\${hev_formatted}**."

        harsh_truths = [truth1, truth2]
        
        stop_loss_profile = {'low': 0.25, 'medium': 0.4, 'high': 0.5}
        win_goal_profile = {'low': 0.4, 'medium': 0.6, 'high': 1.0}
        
        sll_val = personal_bankroll * (1-stop_loss_profile[risk_level])
        sll_loss = personal_bankroll * stop_loss_profile[risk_level]
        wgl_val = personal_bankroll * (1+win_goal_profile[risk_level])
        wgl_profit = personal_bankroll * win_goal_profile[risk_level]
        
        sll_val_f = f"{sll_val:.2f}"
        sll_loss_f = f"{sll_loss:.2f}"
        wgl_val_f = f"{wgl_val:.2f}"
        wgl_profit_f = f"{wgl_profit:.2f}"
        
        strategy1 = f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞**: –î–ª—è –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –∏ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **\${bps_formatted}**.{adjustment_note}"
        strategy2 = f"**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏**: –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ **\${mbet_formatted}**. –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å —Å—Ç–∞–≤–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é."
        strategy3 = f"**–°—Ç–æ–ø-–ª–æ—Å—Å (–∂–µ–ª–µ–∑–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)**: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ **\${sll_val_f}** (–ø–æ—Ç–µ—Ä—è \${sll_loss_f})."
        strategy4 = f"**–¶–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞**: –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –ø—Ä–∏–±—ã–ª—å –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏–≥—Ä—É, –µ—Å–ª–∏ –≤–∞—à –±–∞–Ω–∫ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç **\${wgl_val_f}** (–ø—Ä–∏–±—ã–ª—å \${wgl_profit_f})."
        strategy5 = "**–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è**: **–ù–ò–ö–û–ì–î–ê** –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å '–æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è'. –ö–∞–∂–¥—ã–π —Å–ø–∏–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º."

        optimal_strategy = [strategy1, strategy2, strategy3, strategy4, strategy5]
        
        return {'min_bank_advice': min_bank_advice, 'harsh_truths': harsh_truths, 'optimal_strategy': optimal_strategy, 'bet_per_spin': bet_per_spin}

    def estimate_goal_chance(self, personal_bankroll, desired_win):
        rtp = self.config.get('game_config', {}).get('rtp', 0.96)
        if desired_win <= 0: return {"probability": 1.0}
        if personal_bankroll <= 0: return {"probability": 0.0}
        target_amount = personal_bankroll + desired_win
        effective_bankroll = personal_bankroll * rtp
        probability = effective_bankroll / target_amount
        return {"probability": probability}

    def visualize_win_probabilities(self, level='base'):
        if not self.win_probabilities: return None
        level_data = self.win_probabilities.get(level)
        if not level_data: return None
        df = pd.DataFrame.from_dict(level_data, orient='index').sort_values('combo_probability', ascending=False)
        if df.empty: return None
        df['combo_probability_pct'] = df['combo_probability'] * 100
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.barplot(x='combo_probability_pct', y='name', data=df, palette='viridis_r', orient='h', hue='name', legend=False, ax=ax)
        ax.set_title(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Å–∏–º–≤–æ–ª–æ–º (–£—Ä–æ–≤–µ–Ω—å: {level})', fontsize=16, pad=20)
        ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω —Å–ø–∏–Ω (—Å —É—á–µ—Ç–æ–º Wild), %', fontsize=12); ax.set_ylabel('–°–∏–º–≤–æ–ª', fontsize=12)
        for p in ax.patches:
            width = p.get_width()
            ax.text(width + 0.05, p.get_y() + p.get_height() / 2., f'{width:.3f}%', va='center', fontsize=10)
        ax.spines['top'].set_visible(False); ax.spines['right'].set_visible(False)
        fig.tight_layout()
        return fig

    def get_results_table(self, level='base'):
        if not self.win_probabilities: return pd.DataFrame()
        level_data = self.win_probabilities.get(level)
        if not level_data: return pd.DataFrame()
        df = pd.DataFrame.from_dict(level_data, orient='index')
        if df.empty: return df
        df_sorted = df.sort_values(by='combo_probability', ascending=False)
        df_display = pd.DataFrame({
            '–°–∏–º–≤–æ–ª': df_sorted['name'],
            '–ß–∏—Å—Ç–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)': df_sorted['pure_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—Å Wild, %)': df_sorted['combo_probability'].apply(lambda x: f"{x*100:.2f}%"),
            '–°–ø–∏–Ω–æ–≤ –¥–ª—è 99% —à–∞–Ω—Å–∞': df_sorted['spins_for_99_prob'].apply(lambda x: f"{int(x)}" if x != float('inf') else "‚àû")
        })
        return df_display

# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ—Ç–æ–≤", layout="wide", initial_sidebar_state="expanded")
    
    # --- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
    local_config_files = get_local_config_files(CONFIGS_FOLDER)
    
    with st.sidebar:
        st.title("üé∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–Ω–∞–ª–∏–∑–∞")
        
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–∞–π–ª–∞ ---
        file_source = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            ('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞', '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö'),
            index=0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
        )
        
        config_file = None
        
        if file_source == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞':
            config_file = st.file_uploader("1a. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞", type="json")
        elif file_source == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö' and local_config_files:
            selected_filename = st.selectbox(
                "1b. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—Ç–∞",
                options=local_config_files,
                format_func=lambda x: x # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –µ—Å—Ç—å
            )
            if selected_filename:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
                try:
                    full_path = os.path.join(CONFIGS_FOLDER, selected_filename)
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç,
                    # –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è st.file_uploader
                    with open(full_path, 'rb') as f:
                        config_file = f.read()
                    # st.file_uploader –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º 'name'
                    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã –≤ –æ–±—ä–µ–∫—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å UploaderFile
                    from io import BytesIO
                    config_file = BytesIO(config_file)
                    config_file.name = selected_filename # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                except Exception as e:
                     st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {selected_filename}: {e}")
                     config_file = None
        elif file_source == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö' and not local_config_files:
             st.info(f"–ü–∞–ø–∫–∞ '{CONFIGS_FOLDER}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
        
        personal_bankroll, desired_win, risk_level, analyze_button = 0, 0, 'medium', False
        if config_file is not None:
            personal_bankroll = st.number_input("2. –í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–∫—Ä–æ–ª–ª ($)", min_value=0.01, value=200.0, step=10.0, format="%.2f")
            desired_win = st.number_input("3. –í–∞—à –∂–µ–ª–∞–µ–º—ã–π —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à ($)", min_value=1.0, value=500.0, step=10.0, format="%.2f")
            risk_level = st.selectbox("4. –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", options=['low', 'medium', 'high'], index=1).lower()
            analyze_button = st.button("üöÄ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)
    
    st.title("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å–ª–æ—Ç–æ–≤")
    st.markdown("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª–æ—Ç–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.")
    
    if analyze_button and config_file is not None:
        try:
            # –î–ª—è BytesIO –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            if hasattr(config_file, 'seek'):
                config_file.seek(0)
            config = json.load(config_file)
            calculator = SlotProbabilityCalculator(config)
            if personal_bankroll < calculator.min_bet:
                pb_formatted_error = f"{personal_bankroll:.2f}"
                mb_formatted_error = f"{calculator.min_bet:.2f}"
                st.error(f"**–í–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª (\${pb_formatted_error}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ (\${mb_formatted_error}).**")
                st.warning("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–µ–ª–∏—á—å—Ç–µ –±–∞–Ω–∫—Ä–æ–ª–ª.")
                st.stop()
            game_config = config.get('game_config', {})
            
            gn_formatted = game_config.get('game_name', 'N/A')
            pb_formatted = f"{personal_bankroll:,.2f}"
            dw_formatted = f"{desired_win:,.2f}"
            rl_formatted = risk_level.capitalize()

            st.header(f"üé∞ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–∞: {gn_formatted}", divider="rainbow")
            st.markdown(f"### –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ë–∞–Ω–∫—Ä–æ–ª–ª: \${pb_formatted} | –ñ–µ–ª–∞–µ–º—ã–π –≤—ã–∏–≥—Ä—ã—à: +\${dw_formatted} | –†–∏—Å–∫: **{rl_formatted}**")
            
            goal_result = calculator.estimate_goal_chance(personal_bankroll, desired_win)
            strategy = calculator.generate_bankroll_strategy(personal_bankroll, risk_level)
            bet_per_spin = strategy.get('bet_per_spin')
            guaranteed_spins = int(personal_bankroll / bet_per_spin) if bet_per_spin > 0 else float('inf')
            
            st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Ü–µ–ª–∏", divider="blue")
            col1, col2 = st.columns(2)
            with col1:
                dw_label_formatted = f"{desired_win:,.2f}"
                st.metric(label=f"–û—Ü–µ–Ω–æ—á–Ω—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å \${dw_label_formatted}", value=f"{goal_result['probability']*100:.4f}%")
            with col2:
                spins_str = f"{guaranteed_spins}" if guaranteed_spins != float('inf') else "‚àû"
                st.metric(label="–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–ø–∏–Ω–æ–≤ (–ø—Ä–∏ —Ä–µ–∫. —Å—Ç–∞–≤–∫–µ)", value=spins_str)
            
            with st.expander("–ö–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã? ü§î"):
                st.markdown(f"""
                #### –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
                –≠—Ç–æ –≤–∞—à–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ **–¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ (RTP < 100%) –∏—Å—á–µ—Ä–ø–∞–µ—Ç –≤–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª**.
                #### –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤
                –≠—Ç–æ **—Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤**, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫—Ä–æ–ª–ª, –∏–≥—Ä–∞—è —Å **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞–≤–∫–æ–π** (\${bet_per_spin:.2f}).
                - **–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç–∞–≤–∫–∞?** –ú—ã —É–º–Ω–æ–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Å–ª–æ—Ç–∞ (**\${calculator.min_bet:.2f}**) –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∏—Å–∫–∞ (x1-x5) –∏ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—à–µ–≥–æ –±–∞–Ω–∫—Ä–æ–ª–ª–∞. –ó–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç **–æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è**, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ —Ä–∞–º–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Å–ª–æ—Ç–∞.
                - **–≠—Ç–æ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π "–∑–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏"**: –ß–µ–º –æ–Ω –±–æ–ª—å—à–µ, —Ç–µ–º –¥–æ–ª—å—à–µ –≤–∞—à–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.
                """)
            
            st.subheader("üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", divider="blue")
            fig = calculator.visualize_win_probabilities()
            if fig: st.pyplot(fig)
            st.dataframe(calculator.get_results_table(), use_container_width=True)
            
            st.header("‚ôüÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–≥—Ä—ã", divider="rainbow")
            with st.container(border=True):
                st.subheader("1. –í–µ—Ä–¥–∏–∫—Ç –æ –≤–∞—à–µ–º –±–∞–Ω–∫—Ä–æ–ª–ª–µ")
                for advice in strategy['min_bank_advice']: 
                    st.markdown(f"‚û°Ô∏è {advice}")
            with st.container(border=True):
                st.subheader("2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –†–∞—Å—á–µ—Ç –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞")
                st.markdown("–ß—Ç–æ–±—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–ª–∞ —Å–º—ã—Å–ª, –≤–∞—à –±–∞–Ω–∫—Ä–æ–ª–ª –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–µ—Ä–µ–∂–∏—Ç—å —Å–µ—Ä–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.")
                st.markdown("\n**–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:**")
                st.markdown(f" ‚Ä¢ **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞**: \${calculator.min_bet:.2f}")
                st.markdown(f" ‚Ä¢ **–ú–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –º–∏–Ω. —Å—Ç–∞–≤–∫–µ**: \${calculator.max_win_at_min_bet:,.2f}")
                st.markdown(f" ‚Ä¢ **–°—Ä–µ–¥–Ω–∏–π –∑–Ω–∞—á–∏–º—ã–π –≤—ã–∏–≥—Ä—ã—à (–ø—Ä–∏ –º–∏–Ω. —Å—Ç–∞–≤–∫–µ)**: \${calculator.avg_win:,.2f}")
                st.markdown(f" ‚Ä¢ **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å**: {calculator.volatility.capitalize()}")
                st.markdown("\n**–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞:**")
                st.markdown(f"1. **–§–æ—Ä–º—É–ª–∞** (–¥–ª—è {calculator.volatility.capitalize()} –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏): `{calculator.min_bankroll_formula}`")
                st.markdown(f"2. **–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è**: `{calculator.min_bankroll_calculation}`")
                min_bankroll_final_str = ''.join(filter(lambda char: char.isdigit() or char in '.,', strategy['min_bank_advice'][0].split('$')[-1]))
                st.success(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **\${min_bankroll_final_str}**")
            with st.container(border=True):
                st.subheader("3. –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–∞–≤–¥–∞ –æ —à–∞–Ω—Å–∞—Ö (–±–µ–∑ –ø—Ä–∏–∫—Ä–∞—Å)")
                for truth in strategy['harsh_truths']: 
                    st.markdown(f"‚û°Ô∏è {truth}")
            with st.container(border=True):
                st.subheader("4. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
                for i, step in enumerate(strategy['optimal_strategy'], 1): 
                    st.markdown(f"**–®–∞–≥ {i}**: {step}")
                    
        except json.JSONDecodeError:
            st.error("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JSON-—Ñ–∞–π–ª –∏–º–µ–µ—Ç –≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –û—à–∏–±–∫–∞: {e}")
    elif analyze_button and config_file is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")

if __name__ == "__main__":
    main()
